[{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://a1arakkal.github.io/JANE/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"description","dir":"Articles","previous_headings":"","what":"Description","title":"JANE User Guide","text":"JANE R package fitting latent space network cluster models using expectation-maximization (EM) algorithm. enables flexible modeling unweighted weighted network data, without noise edges, supports directed undirected networks, without degree strength heterogeneity. Designed efficiently handle large networks, JANE allows users explore latent structure, identify actor-centric communities, simulate networks customizable clustering connectivity patterns. Details methodology underlying package can found Arakkal Sewell (2025).","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"features","dir":"Articles","previous_headings":"","what":"Features","title":"JANE User Guide","text":"Fine-tuned algorithm fast accurate actor-centric clustering using latent space models Supports weighted unweighted networks, without noisy edges Allows modeling discrete continuous edge weights Multiple initialization strategies EM algorithm, including random initialization, novel graphical neural network initialization, user-specified values Customizable prior hyperparameter specification Supports parallel implementation faster inference using future future.apply packages (Bengtsson 2021) Supports case-control likelihood approximation scalable inference (Raftery et al. 2012) Built-visualization summary tools","code":""},{"path":[]},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"JANE User Guide","text":"","code":"# Current release from CRAN install.packages(\"JANE\")  # Development version from GitHub # install.packages(\"devtools\") devtools::install_github(\"a1arakkal/JANE\")  # Development version with vignettes devtools::install_github(\"a1arakkal/JANE\", build_vignettes = TRUE)"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"documentation","dir":"Articles","previous_headings":"Getting Started","what":"Documentation","title":"JANE User Guide","text":"installed, can load package access help documentation using following commands:","code":"# Load JANE library(JANE)  # Vignette RShowDoc(\"JANE-User-Guide\", package = \"JANE\")"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"fitting-jane-on-networks-without-noise-edges","dir":"Articles","previous_headings":"","what":"Fitting JANE on networks without noise edges","title":"JANE User Guide","text":"noise_weights argument JANE() set FALSE (default), standard latent space cluster model fit supplied unweighted network.","code":""},{"path":[]},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"model-ndh","dir":"Articles","previous_headings":"Fitting JANE on networks without noise edges > Available models","what":"model = \"NDH\"","title":"JANE User Guide","text":"Applicable undirected networks assumes degree heterogeneity. However, real-world networks, rare find degree heterogeneity, networks exhibit considerable variation node connectivity. example fits NDH model, specifying dimension latent space 2 number clusters 3.","code":"JANE(A = network_adjacency_matrix,      D = 2,      K = 3,      model = \"NDH\",      noise_weights = FALSE)"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"model-rs","dir":"Articles","previous_headings":"Fitting JANE on networks without noise edges > Available models","what":"model = \"RS\"","title":"JANE User Guide","text":"Applicable undirected networks adjusts degree heterogeneity inclusion actor-specific sociality effects. example fits RS model, number clusters specified 3 range dimensions 2 5 latent space considered.","code":"JANE(A = network_adjacency_matrix,      D = 2:5,      K = 3,      model = \"RS\",      noise_weights = FALSE)"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"model-rsr","dir":"Articles","previous_headings":"Fitting JANE on networks without noise edges > Available models","what":"model = \"RSR\"","title":"JANE User Guide","text":"Applicable directed networks adjusts degree heterogeneity inclusion actor-specific sender receiver effects. example fits RSR model, range cluster numbers 2 10 range dimensions 2 5 latent space considered.","code":"JANE(A = network_adjacency_matrix,      D = 2:5,      K = 2:10,      model = \"RSR\",      noise_weights = FALSE)"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"fitting-jane-on-networks-with-noise-edges","dir":"Articles","previous_headings":"","what":"Fitting JANE on networks with noise edges","title":"JANE User Guide","text":"JANE(), weighted networks particularly useful settings noise edges present. settings, noise_weights argument JANE() set TRUE, latent space hurdle model (LSHM) fit. LSHM leverages information propensity form edge observed edge weights probabilistically -weight noisy edges, preserving edges structurally meaningful, subsequently enhancing community detection. supplied network weighted network, absence noise can shown latent positions, regression parameters associated logistic regression model, finite mixture model parameters, actor-specific cluster membership probabilities can estimated separately generalized linear model parameters edge weights. Thus, noise_weights = FALSE, JANE() simply dichotomize supplied weighted network based threshold value 0 fit standard latent space cluster model.","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"available-models-1","dir":"Articles","previous_headings":"Fitting JANE on networks with noise edges","what":"Available models","title":"JANE User Guide","text":"can fit \"NDH\", \"RS\", \"RSR\" models using supported weight distributions described . working weighted networks, \"RS\" \"RSR\" models account degree heterogeneity also strength heterogeneity.","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"family-poisson","dir":"Articles","previous_headings":"Fitting JANE on networks with noise edges > Available models","what":"family = \"poisson\"","title":"JANE User Guide","text":"Use option count-weighted networks. setting models observed edge weights using zero-truncated Poisson (ZTP) distribution: Signal edge weights modeled ZTP using log link Noise edge weights modeled ZTP using fixed user-specified mean via guess_noise_weights argument","code":"JANE(A = network_adjacency_matrix,      D = 2,      K = 5,      model = \"RS\",      noise_weights = TRUE,      family = \"poisson\",      guess_noise_weights = 1L)"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"family-lognormal","dir":"Articles","previous_headings":"Fitting JANE on networks with noise edges > Available models","what":"family = \"lognormal\"","title":"JANE User Guide","text":"Use option edge weights positive, continuous values. setting models observed edge weights using log-normal distribution: Signal edges modeled using log-normal distribution identity link Noise edge weights modeled using log-normal distribution user-specified log-scale mean via guess_noise_weights argument","code":"JANE(A = network_adjacency_matrix,      D = 2,      K = 5,      model = \"RS\",      noise_weights = TRUE,      family = \"lognormal\",      guess_noise_weights = -3.5) # log-scale mean"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"family-bernoulli-default","dir":"Articles","previous_headings":"Fitting JANE on networks with noise edges > Available models","what":"family = \"bernoulli\" (default)","title":"JANE User Guide","text":"setting used unweighted (binary) networks. case: Signal noise edges share observed weight (.e., 1), edge propensity model used identify -weight likely noise edges guess_noise_weights interpreted expected proportion edges likely noise","code":"JANE(A = network_adjacency_matrix,      D = 2,      K = 5,      model = \"RSR\",      noise_weights = TRUE,      family = \"bernoulli\",      guess_noise_weights = 0.2) # expected noise edge proportion"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"guess_noise_weights","dir":"Articles","previous_headings":"Fitting JANE on networks with noise edges","what":"guess_noise_weights","title":"JANE User Guide","text":"guess_noise_weights left NULL (default), JANE() automatically set value based family argument: family %% c(\"lognormal\", \"poisson\"), 1st percentile non-zero edge weights used (log-transformed weights lognormal) family = \"bernoulli\", default value 0.01 (.e., 1%) used, representing assumed proportion noisy edges","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"simulating-networks","dir":"Articles","previous_headings":"","what":"Simulating networks","title":"JANE User Guide","text":"JANE includes built-function, sim_A(), simulating networks varying clustering connectivity patterns. function returns list, includes following two components: : sparse adjacency matrix class ‘dgCMatrix’ representing “true” underlying unweighted network noise edges W: sparse adjacency matrix class ‘dgCMatrix’ representing unweighted weighted network, without noise edges relationship W depends values specified family noise_weights_prob: family = \"bernoulli\" noise_weights_prob = 0, W identical (.e., noise simulated) family = \"bernoulli\" noise_weights_prob > 0, W contains added noise edges, represents noise-free underlying network family %% c(\"poisson\", \"lognormal\") noise_weights_prob = 0, W contains continuous count-valued edge weights, dichotomizing W 0 reproduce family %% c(\"poisson\", \"lognormal\") noise_weights_prob > 0, W noisy, weighted network additional spurious edges, remains true underlying structure example simulate unweighted, undirected, noise-free network 2-dimensional latent space 3 clusters, assuming degree heterogeneity. parameter beta0 can tuned achieve desired network density: example simulates directed, weighted network noise, degree strength heterogeneity, 2-dimensional latent space, 3 clusters.","code":"# Specify the 3 x 2 matrix containing the 1 x 2 mean vectors of the 3 bivariate normals mus <- matrix(c(-1,-1,  # Mean vector 1                  1,-1,  # Mean vector 2                  1, 1), # Mean vector 3               nrow = 3,               ncol = 2,                byrow = TRUE)  # Specify the 2 x 2 x 3 array containing the 2 x 2 precision matrices of the 3 bivariate normals omegas <- array(c(diag(rep(7,2)),  # Precision matrix 1                   diag(rep(7,2)),  # Precision matrix 2                   diag(rep(7,2))), # Precision matrix 3                   dim = c(2,2,3))  # Simulate a network sim_A(N = 100L,        model = \"NDH\",       mus = mus,        omegas = omegas,        p = rep(1/3, 3),        params_LR = list(beta0 = 1.0),       remove_isolates = TRUE) # Specify the 3 x 2 matrix containing the 1 x 2 mean vectors of the 3 bivariate normals mus <- matrix(c(-1,-1,  # Mean vector 1                  1,-1,  # Mean vector 2                  1, 1), # Mean vector 3               nrow = 3,               ncol = 2,                byrow = TRUE)  # Specify the 2 x 2 x 3 array containing the 2 x 2 precision matrices of the 3 bivariate normals omegas <- array(c(diag(rep(7,2)),  # Precision matrix 1                   diag(rep(7,2)),  # Precision matrix 2                   diag(rep(7,2))), # Precision matrix 3                   dim = c(2,2,3))  desired_density <- 0.1 # Target network density min_density <- desired_density * 0.99  # Lower bound for acceptable density max_density <- desired_density * 1.01  # Upper bound for acceptable density n_act <- 100L # Number of actors in the network  density <- Inf # Initialize density to enter while loop beta0 <- 0.5 # Initial value for intercept parameter n_while_loop <- 0 # Counter for outer loop iterations max_its <- 100 # Maximum number of iterations change_beta0 <- 0.1  # Amount to adjust beta0 by  # Adjust beta0 until simulated network has the approximate desired density while(! (density >= min_density & density <= max_density) ){      if(n_while_loop>max_its){     break   }      n_retry_isolate <- 0   retry_isolate <- T      # Retry until a network with no isolates is generated (this while loop is optional)   while(retry_isolate){          sim_data <- sim_A(N = n_act,                        model = \"NDH\",                       mus = mus,                        omegas = omegas,                        p = rep(1/3, 3),                        params_LR = list(beta0 = beta0),                       remove_isolates = TRUE)          n_retry_isolate <- n_retry_isolate + 1          # Accept network if no isolates remain, or if retried more than 10 times at the same beta0     if(nrow(sim_data$A) == n_act | n_retry_isolate>10){       retry_isolate <- F     }        }      # Compute network density   density <- igraph::graph.density(     igraph::graph_from_adjacency_matrix(sim_data$A, mode = \"undirected\")     )    # Adjust beta0 based on density feedback   if (density > max_density)  {     beta0 <- beta0 - change_beta0   }      if (density < min_density)  {     beta0 <- beta0 + change_beta0   }      n_while_loop <- n_while_loop + 1    }      A <- sim_data$A # Final simulated adjacency matrix igraph::graph.density(igraph::graph_from_adjacency_matrix(A, mode = \"undirected\")) # Verify density # Specify the 3 x 2 matrix containing the 1 x 2 mean vectors of the 3 bivariate normals mus <- matrix(c(-1,-1,  # Mean vector 1                  1,-1,  # Mean vector 2                  1, 1), # Mean vector 3               nrow = 3,               ncol = 2,                byrow = TRUE)  # Specify the 2 x 2 x 3 array containing the 2 x 2 precision matrices of the 3 bivariate normals omegas <- array(c(diag(rep(7,2)),  # Precision matrix 1                   diag(rep(7,2)),  # Precision matrix 2                   diag(rep(7,2))), # Precision matrix 3                   dim = c(2,2,3))  # Simulate a network sim_A(N = 100L,        model = \"RSR\",       family = \"poisson\",       mus = mus,        omegas = omegas,        p = rep(1/3, 3),        params_LR = list(beta0 = 1),       params_weights = list(beta0 = 2),       noise_weights_prob = 0.1,       mean_noise_weights = 1,       remove_isolates = TRUE)"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"model-selection-criteria-for-choosing-the-number-of-clusters","dir":"Articles","previous_headings":"","what":"Model selection criteria for choosing the number of clusters","title":"JANE User Guide","text":"JANE() allows following model selection criteria choose number clusters best initialization EM algorithm (smaller values favored): \"Total_BIC\" (.e., BIC): Sum BICmodelBIC_{model} BICmbcBIC_{mbc}, BICmodelBIC_{model} BIC computed logistic regression Hurdle model component BICmbcBIC_{mbc} BIC computed model based clustering component. model selection criterion proposed Handcock, Raftery, Tantrum (2007) \"Total_ICL\" (.e., BICL): (default) sum BICmodelBIC_{model} ICLmbcICL_{mbc}, criterion similar \"Total_BIC\", uses integrated completed likelihood (ICL) model based clustering component, tends favor well-separated clusters Based simulation studies, Biernacki, Celeux, Govaert (2000) recommends interest mixture modeling cluster analysis, instead density estimation, ICLmbcICL_{mbc} criterion favored BICmbcBIC_{mbc} criterion, BICmbcBIC_{mbc} criterion tends overestimate number clusters. BICmbcBIC_{mbc} criterion designed choose number components mixture model rather number clusters. Warning: certain whether appropriate use model selection criterion select dimension latent space DD. example fits RSR model, range cluster numbers 2 10 considered 2-dimensional latent space \"Total_BIC\" used select optimal number clusters best initialization EM algorithm. example fits RSR model 2-dimensional latent space 3 clusters \"Total_ICL\" used select optimal initialization EM algorithm 10 unique starts. Note: number starts EM algorithm controlled control argument supplying value n_start.","code":"JANE(A = network_adjacency_matrix,      D = 2,      K = 2:10,      model = \"RSR\",      noise_weights = FALSE,      control = list(IC_selection = \"Total_BIC\")) JANE(A = network_adjacency_matrix,      D = 2,      K = 3,      model = \"RSR\",      noise_weights = FALSE,      control = list(IC_selection = \"Total_ICL\",                     n_start = 10))"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"initialization-of-em-algorithm","dir":"Articles","previous_headings":"","what":"Initialization of EM algorithm","title":"JANE User Guide","text":"JANE() three initialization strategies generate starting values EM algorithm, controlled initialization argument: \"GNN\": uses type graphical neural network approach generate initial values (default). Details graphical neural network approach can found Arakkal Sewell (2025) \"random\": uses random initial values user-supplied list S3 class \"JANE.initial_values\" representing initial values EM algorithm. See ?specify_initial_values details specify initial values example starting values supplied JANE() using specify_initial_values().","code":"# Specify starting values D <- 3 K <- 5 N <- nrow(sim_data$A) n_interior_knots <- 5L U <- matrix(stats::rnorm(N*D), nrow = N, ncol = D) omegas <- stats::rWishart(n = K, df = D+1, Sigma = diag(D)) mus <- matrix(stats::rnorm(K*D), nrow = K, ncol = D) p <- extraDistr::rdirichlet(n = 1, rep(3,K))[1,] Z <-  extraDistr::rdirichlet(n = N, alpha = rep(1, K)) beta <- stats::rnorm(n = 1 + 2*(1 + n_interior_knots))  my_starting_values <- specify_initial_values(A = network_adjacency_matrix,                                              D = D,                                              K = K,                                              model = \"RSR\",                                              n_interior_knots = n_interior_knots,                                              U = U,                                              omegas = omegas,                                               mus = mus,                                               p = p,                                               Z = Z,                                              beta = beta)           # Run JANE using my_starting_values (no need to specify D and K as function will  # determine those values from my_starting_values) JANE(A = network_adjacency_matrix,      initialization = my_starting_values,      model = \"RSR\",      noise_weights = FALSE)"},{"path":[]},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"prior-distributions","dir":"Articles","previous_headings":"Specification of prior hyperparameters","what":"Prior distributions","title":"JANE User Guide","text":"prior distributions specified follows:","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"prior-on-boldsymbolmu_k-and-boldsymbolomega_k","dir":"Articles","previous_headings":"Specification of prior hyperparameters > Prior distributions","what":"Prior on 𝛍k\\boldsymbol{\\mu}_k and 𝛀k\\boldsymbol{\\Omega}_k","title":"JANE User Guide","text":"prior used k=1,…,Kk = 1, \\ldots, K: 𝛀k∼Wishart(c,𝐆−1) \\boldsymbol{\\Omega}_k \\sim \\text{Wishart}(c, \\boldsymbol{G}^{-1}) 𝛍k∣𝛀k∼MVN(𝐚,(b𝛀k)−1) \\boldsymbol{\\mu}_k \\mid \\boldsymbol{\\Omega}_k \\sim \\text{MVN}(\\boldsymbol{}, (b \\boldsymbol{\\Omega}_k)^{-1})","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"prior-on-boldsymbolp","dir":"Articles","previous_headings":"Specification of prior hyperparameters > Prior distributions","what":"Prior on 𝐩\\boldsymbol{p}","title":"JANE User Guide","text":"current implementation, require elements nu vector ≥1\\geq 1 prevent negative mixture weights empty clusters: 𝐩∼Dirichlet(ν1,…,νK) \\boldsymbol{p} \\sim \\text{Dirichlet}(\\nu_1, \\ldots, \\nu_K)","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"prior-on-boldsymbolbeta_lr","dir":"Articles","previous_headings":"Specification of prior hyperparameters > Prior distributions","what":"Prior on 𝛃LR\\boldsymbol{\\beta}_{LR}","title":"JANE User Guide","text":"𝛃LR∼MVN(𝐞,𝐅−1) \\boldsymbol{\\beta}_{LR} \\sim \\text{MVN}(\\boldsymbol{e}, \\boldsymbol{F}^{-1})","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"prior-on-q","dir":"Articles","previous_headings":"Specification of prior hyperparameters > Prior distributions","what":"Prior on qq","title":"JANE User Guide","text":"q∼Beta(h,l) q \\sim \\text{Beta}(h, l)","code":""},{"path":[]},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"prior-on-boldsymbolbeta_glm","dir":"Articles","previous_headings":"Specification of prior hyperparameters > Prior distributions > Zero-truncated Poisson","what":"Prior on 𝛃GLM\\boldsymbol{\\beta}_{GLM}","title":"JANE User Guide","text":"𝛃GLM∼MVN(𝐞2,𝐅2−1) \\boldsymbol{\\beta}_{GLM} \\sim \\text{MVN}(\\boldsymbol{e}_2, \\boldsymbol{F}_2^{-1})","code":""},{"path":[]},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"prior-on-tau2_textweights","dir":"Articles","previous_headings":"Specification of prior hyperparameters > Prior distributions > Log-normal","what":"Prior on τweights2\\tau^2_{\\text{weights}}","title":"JANE User Guide","text":"τweights2∼Gamma(m12,o12) \\tau^2_{\\text{weights}} \\sim \\text{Gamma}\\left(\\frac{m_1}{2}, \\frac{o_1}{2}\\right)","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"prior-on-boldsymbolbeta_glm-1","dir":"Articles","previous_headings":"Specification of prior hyperparameters > Prior distributions > Log-normal","what":"Prior on 𝛃GLM\\boldsymbol{\\beta}_{GLM}","title":"JANE User Guide","text":"𝛃GLM∣τweights2∼MVN(𝐞2,(τweights2𝐅2)−1) \\boldsymbol{\\beta}_{GLM} \\mid \\tau^2_{\\text{weights}} \\sim \\text{MVN}\\left(\\boldsymbol{e}_2, (\\tau^2_{\\text{weights}} \\boldsymbol{F}_2)^{-1}\\right)","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"prior-on-tau2_textnoise-weights","dir":"Articles","previous_headings":"Specification of prior hyperparameters > Prior distributions > Log-normal","what":"Prior on τnoise weights2\\tau^2_{\\text{noise weights}}","title":"JANE User Guide","text":"τnoise weights2∼Gamma(m22,o22) \\tau^2_{\\text{noise weights}} \\sim \\text{Gamma}\\left(\\frac{m_2}{2}, \\frac{o_2}{2}\\right)","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"default-hyperparameters","dir":"Articles","previous_headings":"Specification of prior hyperparameters > Prior distributions","what":"Default hyperparameters","title":"JANE User Guide","text":"𝐚=𝟎D\\boldsymbol{} = \\boldsymbol{0}_D b=1b = 1 c=D+1c = D+1 𝐞=𝟎dim(𝛃LR)\\boldsymbol{e} = \\boldsymbol{0}_{dim(\\boldsymbol{\\beta}_{LR})} 𝐞2=𝟎dim(𝛃GLM)\\boldsymbol{e}_2 = \\boldsymbol{0}_{dim(\\boldsymbol{\\beta}_{GLM})} 𝐅=Diag(1/100,(1/2.52)𝟏dim(𝛃LR)−1)\\boldsymbol{F} = \\text{Diag}(1/100, (1/2.5^2)\\mathbf{1}_{dim(\\boldsymbol{\\beta}_{LR})-1}) 𝐅2=Diag(1/100,(1/2.52)𝟏dim(𝛃GLM)−1)\\boldsymbol{F}_2 = \\text{Diag}(1/100, (1/2.5^2)\\mathbf{1}_{dim(\\boldsymbol{\\beta}_{GLM})-1}) 𝐆=𝐈D\\boldsymbol{G} = \\mathbf{}_D h=l=1h = l =1 m1=m2=o1=o2=2m_1 = m_2 = o_1 = o_2 = 2 𝛎=3𝟏K\\boldsymbol{\\nu} = 3\\mathbf{1}_{K} , DD dimension latent space, KK number clusters, dim(𝛃LR)=dim(𝛃GLM)={1\"NDH”ζ+2\"RS”2ζ+3\"RSR”,dim(\\boldsymbol{\\beta}_{LR}) = dim(\\boldsymbol{\\beta}_{GLM}) = \\begin{cases}1 & \\text{\"NDH''}\\\\ \\zeta+2 &  \\text{\"RS''} \\\\ 2\\zeta+3 & \\text{\"RSR''},\\end{cases} ζ\\zeta number interior knots used fitting natural cubic spline degree heterogeneity (connection strength heterogeneity working weighted network) models (.e., \"RS\" \"RSR\" ).","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"example-of-specifying-hyperparameters-for-a-single-combination-of-k-and-d","dir":"Articles","previous_headings":"Specification of prior hyperparameters","what":"Example of specifying hyperparameters for a single combination of KK and DD","title":"JANE User Guide","text":"","code":"# Specify prior hyperparameters D <- 3 K <- 5 n_interior_knots <- 5L a <- rep(1, D) b <- 3 c <- 4 G <- 10*diag(D) nu <- rep(2, K) e <- rep(0.5, 1 + (n_interior_knots + 1)) f <- diag(c(0.1, rep(0.5, n_interior_knots + 1)))  my_prior_hyperparameters <- specify_priors(D = D,                                            K = K,                                            model = \"RS\",                                            n_interior_knots = n_interior_knots,                                            a = a,                                            b = b,                                            c = c,                                            G = G,                                            nu = nu,                                            e = e,                                            f = f)                                             # Run JANE using supplied prior hyperparameters (no need to specify D and K  # as function will determine those values from my_prior_hyperparameters) JANE(A = network_adjacency_matrix,      initialization = \"GNN\",      model = \"RS\",      noise_weights = FALSE,      control = list(priors = my_prior_hyperparameters))"},{"path":[]},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"nested-list","dir":"Articles","previous_headings":"Specification of prior hyperparameters > Example of specifying hyperparameters for multiple combinations of KK and DD","what":"Nested list","title":"JANE User Guide","text":"","code":"# Specify first set of prior hyperparameters D <- 3 K <- 5 n_interior_knots <- 5L a <- rep(1, D) b <- 3 c <- 4 G <- 10*diag(D) nu <- rep(2, K) e <- rep(0.5, 1 + (n_interior_knots + 1)) f <- diag(c(0.1, rep(0.5, n_interior_knots + 1)))  my_prior_hyperparameters_1 <- specify_priors(D = D,                                              K = K,                                              model = \"RS\",                                              n_interior_knots = n_interior_knots,                                              a = a,                                              b = b,                                              c = c,                                              G = G,                                              nu = nu,                                              e = e,                                              f = f)  # Specify second set of prior hyperparameters D <- 2 K <- 3 n_interior_knots <- 5L a <- rep(1, D) b <- 3 c <- 4 G <- 10*diag(D) nu <- rep(2, K) e <- rep(0.5, 1 + (n_interior_knots + 1)) f <- diag(c(0.1, rep(0.5, n_interior_knots + 1)))  my_prior_hyperparameters_2 <- specify_priors(D = D,                                              K = K,                                              model = \"RS\",                                              n_interior_knots = n_interior_knots,                                              a = a,                                              b = b,                                              c = c,                                              G = G,                                              nu = nu,                                              e = e,                                              f = f)  # Create nested list my_prior_hyperparameters <- list(my_prior_hyperparameters_1,                                  my_prior_hyperparameters_2)  # Run JANE using supplied prior hyperparameters (no need to specify D and K  # as function will determine those values from my_prior_hyperparameters) JANE(A = network_adjacency_matrix,      initialization = \"GNN\",      model = \"RS\",      noise_weights = FALSE,      control = list(priors = my_prior_hyperparameters))"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"unevaluated-calls","dir":"Articles","previous_headings":"Specification of prior hyperparameters > Example of specifying hyperparameters for multiple combinations of KK and DD","what":"Unevaluated calls","title":"JANE User Guide","text":"Unevaluated calls using quote() can supplied values specific hyperparameters. particularly useful running JANE() multiple combinations KK DD.","code":"# Specify prior hyperparameters as unevaluated calls n_interior_knots <- 5L e <- rep(0.5, 1 + (n_interior_knots + 1)) f <- diag(c(0.1, rep(0.5, n_interior_knots + 1))) my_prior_hyperparameters <- specify_priors(model = \"RS\",                                            n_interior_knots = n_interior_knots,                                            a = quote(rep(1, D)),                                            b = b,                                            c = quote(D + 1),                                            G = quote(10*diag(D)),                                            nu = quote(rep(2, K)),                                            e = e,                                            f = f)                                             # Run JANE using supplied prior hyperparameters JANE(A = network_adjacency_matrix,      D = 2:5,      K = 2:10,      initialization = \"GNN\",      model = \"RS\",      noise_weights = FALSE,      control = list(priors = my_prior_hyperparameters))"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"parallel-implementation-of-jane","dir":"Articles","previous_headings":"","what":"Parallel implementation of JANE()","title":"JANE User Guide","text":"can speed fitting models multiple combinations cluster number K, latent space dimension D, number initializations EM algorithm n_start, running JANE() parallel. leverages future future.apply packages distribute computation across cores. example using 5 parallel workers run JANE() parallel backend enabled, followed resetting sequential processing.","code":"# Set up parallel plan with 5 workers (cores) future::plan(future::multisession, workers = 5)  # Run JANE in parallel  res_parallel <- JANE(A = network_adjacency_matrix,                      D = 2:5,                      K = 3:10,                      initialization = \"GNN\",                      model = \"RSR\")  # Reset to sequential processing future::plan(future::sequential)"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"case-control-implementation-of-jane","dir":"Articles","previous_headings":"","what":"Case-control implementation of JANE()","title":"JANE User Guide","text":"working large sparse networks, case-control approximation implemented JANE() can reduce computational cost. approach leverages approximation methods developed Raftery et al. (2012). case-control implementation, likelihood includes edges (information lies) uses Monte Carlo approximation terms involving unconnected dyads network (.e., non-edges). Thus, cost evaluating likelihood becomes linear, rather quadratic, NN. example running JANE() case-control approach, sampling 20 controls (.e., non-edges) per actor.","code":"JANE(A = network_adjacency_matrix,      D = 2,      K = 3,      initialization = \"GNN\",      model = \"RSR\",      case_control = TRUE,      control = list(n_control = 20))"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"using-s3-methods-with-jane-objects","dir":"Articles","previous_headings":"","what":"Using S3 methods with JANE objects","title":"JANE User Guide","text":"fit model using JANE() function, can inspect analyze results using several built-S3 methods. methods work JANE S3 class object returned model fit. examples section, assume res object returned JANE().","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"print","dir":"Articles","previous_headings":"Using S3 methods with JANE objects","what":"print()","title":"JANE User Guide","text":"print() method gives summary optimal model fit available components. displays: model type, number clusters, latent space dimension Sizes cluster, estimated using hard cluster assignment rule defined {h|ẐihU=maxkẐikU}\\{h | \\hat{Z}^{U}_{ih} = max_k \\hat{Z}^{U}_{ik}\\}, ẐikU\\hat{Z}^{U}_{ik} estimated conditional probability ithi^{th} actor belongs kthk^{th} cluster. Note, optimal number clusters selected may include empty clusters based hard cluster assignments Available components fitted object res","code":"print(res)"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"summary","dir":"Articles","previous_headings":"Using S3 methods with JANE objects","what":"summary()","title":"JANE User Guide","text":"Use summary() method extract display detailed information estimated model. can also compare estimated cluster assignments known true assignments using true_labels argument, inspect starting values using initial_values = TRUE. Output includes: Coefficients logistic GLM components Latent positions, cluster means, precision matrices Soft cluster memberships hard cluster assignments Clustering uncertainty ARI, NMI, classification error rate (true_labels supplied) Model selection criteria Summary noise edges noise_weights = TRUE. includes estimated conditional probability specific edge noise non-noise edge, corresponding noise edge cluster assignment based hard clustering rule {h|ẐehW=max(Ẑe1W,Ẑe2W)}\\{h | \\hat{Z}^{W}_{eh} = max(\\hat{Z}^{W}_{e1}, \\hat{Z}^{W}_{e2})\\} e=1…,|E|e = 1\\dots,|E|, Ẑe1W\\hat{Z}^{W}_{e1} Ẑe2W\\hat{Z}^{W}_{e2} estimated conditional probabilities ethe^{th} edge non-noise noise edge, respectively, |E||E| represents total number edges network (undirected networks, upper diagonal edges retained). Noise edge cluster labels defined : 1 = non-noise edge 2 = noise edge","code":"summary(res) summary(res, true_labels = true_labels_vec) summary(res, initial_values = TRUE)"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"plot","dir":"Articles","previous_headings":"Using S3 methods with JANE objects","what":"plot()","title":"JANE User Guide","text":"plot() method provides visualizations depending type argument.","code":""},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"latent-space-clustering-default-type-lsnc","dir":"Articles","previous_headings":"Using S3 methods with JANE objects > plot()","what":"Latent space clustering (default type = \"lsnc\")","title":"JANE User Guide","text":"Plots latent positions colored cluster Contours show fitted Gaussian components DD = 2. DD > 2, pairwise plots dimensions displayed instead","code":"plot(res)"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"misclassified-actors-type-misclassified","dir":"Articles","previous_headings":"Using S3 methods with JANE objects > plot()","what":"Misclassified actors (type = \"misclassified\")","title":"JANE User Guide","text":"Highlights misclassified actors black based supplied true cluster assignments (.e., true_labels_vec example)","code":"plot(res, type = \"misclassified\", true_labels = true_labels_vec)"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"clustering-uncertainty-type-uncertainty","dir":"Articles","previous_headings":"Using S3 methods with JANE objects > plot()","what":"Clustering uncertainty (type = \"uncertainty\")","title":"JANE User Guide","text":"Colors nodes uncertainty (.e., 1 - maxkẐikUmax_k\\hat{Z}^{U}_{ik})","code":"plot(res, type = \"uncertainty\")"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"em-trace-plot-type-trace_plot","dir":"Articles","previous_headings":"Using S3 methods with JANE objects > plot()","what":"EM trace plot (type = \"trace_plot\")","title":"JANE User Guide","text":"Shows convergence metrics EM iterations","code":"plot(res, type = \"trace_plot\")"},{"path":"https://a1arakkal.github.io/JANE/articles/JANE-User-Guide.html","id":"additional-options","dir":"Articles","previous_headings":"Using S3 methods with JANE objects > plot()","what":"Additional options","title":"JANE User Guide","text":"alpha_edge, alpha_node, zoom, swap_axes, rotation_angle, cluster_cols, etc. remove_noise_edges = TRUE removes noise edges based noise edge hard cluster assignment (applicable JANE() run noise_weights = TRUE)","code":""},{"path":[]},{"path":"https://a1arakkal.github.io/JANE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alan Arakkal. Author, maintainer, copyright holder. Daniel Sewell. Author.","code":""},{"path":"https://a1arakkal.github.io/JANE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Arakkal , Sewell DK (2025). “JANE: Just Another latent space NEtwork clustering algorithm.” Computational Statistics & Data Analysis, 211. doi:10.1016/j.csda.2025.108228.","code":"@Article{,   title = {JANE: Just Another latent space NEtwork clustering algorithm},   author = {Alan T. Arakkal and Daniel K. Sewell},   journal = {Computational Statistics & Data Analysis},   year = {2025},   volume = {211},   doi = {10.1016/j.csda.2025.108228}, }"},{"path":"https://a1arakkal.github.io/JANE/index.html","id":"jane","dir":"","previous_headings":"","what":"Just Another Latent Space Network Clustering Algorithm","title":"Just Another Latent Space Network Clustering Algorithm","text":"JANE R package fitting latent space network cluster models using expectation-maximization (EM) algorithm. enables flexible modeling unweighted weighted network data, without noise edges, supports directed undirected networks, without degree strength heterogeneity. Designed efficiently handle large networks, JANE allows users explore latent structure, identify actor-centric communities, simulate networks customizable clustering connectivity patterns. Details methodology underlying package can found .","code":""},{"path":"https://a1arakkal.github.io/JANE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Just Another Latent Space Network Clustering Algorithm","text":"","code":"# Current release from CRAN install.packages(\"JANE\")  # Development version from GitHub # install.packages(\"devtools\") devtools::install_github(\"a1arakkal/JANE\")"},{"path":[]},{"path":"https://a1arakkal.github.io/JANE/index.html","id":"simulate-a-network","dir":"","previous_headings":"Basic usage","what":"Simulate a network","title":"Just Another Latent Space Network Clustering Algorithm","text":"","code":"library(JANE) mus <- matrix(c(-1,-1,1,-1,1,1),                nrow = 3,               ncol = 2,                byrow = TRUE) omegas <- array(c(diag(rep(7,2)),                   diag(rep(7,2)),                    diag(rep(7,2))),                    dim = c(2,2,3)) p <- rep(1/3, 3) beta0 <- 1.0 sim_data <- JANE::sim_A(N = 100L,                          model = \"NDH\",                         mus = mus,                          omegas = omegas,                          p = p,                          beta0 = beta0,                          remove_isolates = TRUE)"},{"path":"https://a1arakkal.github.io/JANE/index.html","id":"fit-jane-on-network","dir":"","previous_headings":"Basic usage","what":"Fit JANE on network","title":"Just Another Latent Space Network Clustering Algorithm","text":"","code":"res <- JANE::JANE(A = sim_data$A,                   D = 2L,                   K = 3L,                   initialization = \"GNN\",                    model = \"NDH\",                   case_control = FALSE,                   DA_type = \"none\")"},{"path":"https://a1arakkal.github.io/JANE/index.html","id":"summarize-and-plot-fit","dir":"","previous_headings":"Basic usage","what":"Summarize and plot fit","title":"Just Another Latent Space Network Clustering Algorithm","text":"","code":"# Summarize fit  summary(res)  # Plot network plot(res)"},{"path":"https://a1arakkal.github.io/JANE/reference/JANE.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit JANE — JANE","title":"Fit JANE — JANE","text":"Fit latent space cluster model, without noise edges, using EM algorithm.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/JANE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit JANE — JANE","text":"","code":"JANE(   A,   D = 2,   K = 2,   family = \"bernoulli\",   noise_weights = FALSE,   guess_noise_weights = NULL,   model,   initialization = \"GNN\",   case_control = FALSE,   DA_type = \"none\",   seed = NULL,   control = list() )"},{"path":"https://a1arakkal.github.io/JANE/reference/JANE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit JANE — JANE","text":"square matrix sparse matrix class 'dgCMatrix' representing adjacency matrix network interest. D Integer (scalar vector) specifying dimension latent space (default 2). K Integer (scalar vector) specifying number clusters consider (default 2). family character string specifying distribution edge weights. 'bernoulli': Expects unweighted network; utilizes Bernoulli distribution logit link (default) 'lognormal': Expects weighted network positive, non-zero, continuous edge weights; utilizes log-normal distribution identity link 'poisson': Expects weighted network edge weights representing non-zero counts; utilizes zero-truncated Poisson distribution log link noise_weights logical; TRUE Hurdle model used account noise weights, FALSE simply utilizes supplied network (converted unweighted binary network weighted network supplied, .e., (> 0.0)*1.0) fits latent space cluster model (default FALSE). guess_noise_weights applicable noise_weights = TRUE. numeric value specifying best guess mean noise weight distribution family %% c('lognormal', 'poisson') (mean log-scale lognormal) proportion (.e. (0,1)) edges noise edges family = 'bernoulli'. NULL (.e., default) noise_weights = TRUE 1st percentile non-zero weights used family %% c('lognormal', 'poisson') 1% used family = 'bernoulli'. model character string specifying model fit: 'NDH': undirected network degree heterogeneity (connection strength heterogeneity working weighted network) 'RS': undirected network degree heterogeneity (connection strength heterogeneity working weighted network) 'RSR': directed network degree heterogeneity (connection strength heterogeneity working weighted network) initialization character string list specify initial values EM algorithm: 'GNN': uses type graphical neural network approach generate initial values (default) 'random': uses random initial values user-supplied list S3 class \"JANE.initial_values\" representing initial values EM algorithm. See specify_initial_values details specify initial values case_control logical; TRUE uses case-control approximation approach (default FALSE). DA_type (Experimental) character string specify type deterministic annealing approach use 'none': employ deterministic annealing approach (default) 'cooling': (Experimental) employs traditional deterministic annealing approach temperature decreases 'heating': (Experimental) employs deterministic anti-annealing approach temperature increases 'hybrid': (Experimental) employs combination 'cooling' 'heating' approach seed (optional) integer value specify seed reproducibility. control list control parameters. See 'Details'.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/JANE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit JANE — JANE","text":"list S3 class \"JANE\" containing following components: input_params list containing input parameters IC_selection, case_control, DA_type, model, family, noise_weights used function call. square sparse adjacency matrix class 'dgCMatrix' used fitting latent space cluster model. matrix can different input matrix isolates removed. IC_out matrix containing relevant information criteria combinations K, D, n_start considered. 'selected' column indicates chosen optimal fit. all_convergence_ind matrix containing convergence information (.e., 1 = converged, 0 = converge) number iterations combinations K, D, n_start, beta_temperature considered. optimal_res list containing estimated parameters interest based optimal fit selected. recommended use summary() extract parameters interest. See summary.JANE details. optimal_starting list S3 class \"JANE.initial_values\" containing starting parameters used EM algorithm resulted optimal fit selected. recommended use summary() extract parameters interest. See summary.JANE details.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/JANE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit JANE — JANE","text":"Isolates removed adjacency matrix . unsymmetric adjacency matrix supplied model %% c('NDH', 'RS') user asked like proceed converting symmetric matrix (.e., <- 1.0 * ( (+ t()) > 0.0 )); able family = 'bernoulli'. Additionally, weighted network supplied noise_weights = FALSE, network converted unweighted binary network (.e., (> 0.0)*1.0) latent space cluster model fit. control: control argument named list user can supply containing following components: verbose logical; TRUE causes additional information printed progress EM algorithm (default FALSE). max_its integer specifying maximum number iterations EM algorithm (default 1e3). min_its integer specifying minimum number iterations EM algorithm (default 10). priors list S3 class \"JANE.priors\" representing prior hyperparameter specifications (default NULL). See specify_priors details specify hyperparameters. n_interior_knots (relevant model %% c('RS', 'RSR')) integer specifying number interior knots used fitting natural cubic spline degree heterogeneity (connection strength heterogeneity working weighted network) models (default 5). termination_rule character string specify termination rule determine convergence EM algorithm: 'prob_mat': uses change absolute difference \\(\\hat{Z}^{U}\\) (.e., \\(N \\times K\\) cluster membership probability matrix) subsequent iterations (default) 'Q': uses change absolute difference objective function E-step evaluated using parameters subsequent iterations 'ARI': comparing classifications subsequent iterations using adjusted Rand index 'NMI': comparing classifications subsequent iterations using normalized mutual information 'CER': comparing classifications subsequent iterations using classification error rate tolerance numeric specifying tolerance used termination_rule %% c('Q', 'prob_mat') (default 1e-3). tolerance_ARI numeric specifying tolerance used termination_rule = 'ARI' (default 0.999). tolerance_NMI numeric specifying tolerance used termination_rule = 'NMI' (default 0.999). tolerance_CER numeric specifying tolerance used termination_rule = 'CER' (default 0.01). n_its_start_CA integer specifying iteration start computing change cumulative averages (note: change cumulative average \\(\\hat{U}\\), latent position matrix, tracked termination_rule = 'Q') (default 20). tolerance_diff_CA numeric specifying tolerance used change cumulative average termination_rule metric \\(\\hat{U}\\) (note: change cumulative average \\(\\hat{U}\\) tracked termination_rule = 'Q') (default 1e-3). consecutive_diff_CA integer specifying tolerance number consecutive instances change cumulative average less tolerance_diff_CA (default 5). quantile_diff numeric [0,1] specifying quantile used computing change absolute difference \\(\\hat{Z}^{U}\\) \\(\\hat{U}\\) subsequent iterations (default 1, .e., max). beta_temp_schedule (Experimental) numeric vector specifying temperature schedule deterministic annealing (default 1, .e., deterministic annealing utilized). n_control integer specifying fixed number controls (.e., non-links) sampled actor; relevant case_control = TRUE (default 100 case_control = TRUE NULL case_control = FALSE). n_start integer specifying maximum number starts EM algorithm (default 5). max_retry integer specifying maximum number re-attempts starting values cause issues EM algorithm (default 5). IC_selection character string specify information criteria used select optimal fit based combinations K, D, n_start considered: 'BIC_model': BIC computed logistic regression Hurdle model component 'BIC_mbc': BIC computed model based clustering component 'ICL_mbc': ICL computed model based clustering component 'Total_BIC': sum 'BIC_model' 'BIC_mbc' 'Total_ICL': sum 'BIC_model' 'ICL_mbc' (default) sd_random_U_GNN (relevant initialization = 'GNN') positive numeric value specifying standard deviation random draws normal distribution initialize \\(U\\) (default 1). max_retry_GNN (relevant initialization = 'GNN') integer specifying maximum number re-attempts GNN approach switching random starting values (default 10). n_its_GNN (relevant initialization = 'GNN') integer specifying maximum number iterations GNN approach (default 10). downsampling_GNN (relevant initialization = 'GNN') logical; TRUE employs downsampling s.t. number links non-links balanced GNN approach (default TRUE). Running JANE parallel: JANE integrates future future.apply packages fit various combinations K, D, n_start parallel. 'Examples' section provides example run JANE parallel. See plan future.apply details. Choosing number clusters: JANE allows following model selection criteria choose number clusters (smaller values favored): 'BIC_model': BIC computed logistic regression Hurdle model component 'BIC_mbc': BIC computed model based clustering component 'ICL_mbc': ICL (Biernacki et al. (2000)) computed model based clustering component 'Total_BIC': Sum 'BIC_model' 'BIC_mbc', model selection criterion proposed Handcock et al. (2007) 'Total_ICL': (default) sum 'BIC_model' 'ICL_mbc', criterion similar 'Total_BIC', uses ICL model based clustering component, tends favor well-separated clusters. Based simulation studies, Biernacki et al. (2000) recommends interest mixture modeling cluster analysis, instead density estimation, \\(ICL_{mbc}\\) criterion favored \\(BIC_{mbc}\\) criterion, \\(BIC_{mbc}\\) criterion tends overestimate number clusters. \\(BIC_{mbc}\\) criterion designed choose number components mixture model rather number clusters. Warning: certain whether appropriate use model selection criterion select D.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/JANE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit JANE — JANE","text":"Biernacki, C., Celeux, G., Govaert, G., 2000. Assessing mixture model clustering integrated completed likelihood. IEEE Transactions Pattern Analysis Machine Intelligence 22, 719–725. Handcock, M.S., Raftery, .E., Tantrum, J.M., 2007. Model-based clustering social networks. Journal Royal Statistical Society Series : Statistics Society 170, 301–354.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/JANE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit JANE — JANE","text":"","code":"# \\donttest{ # Simulate network mus <- matrix(c(-1,-1,1,-1,1,1),                nrow = 3,               ncol = 2,                byrow = TRUE) omegas <- array(c(diag(rep(7,2)),                   diag(rep(7,2)),                    diag(rep(7,2))),                    dim = c(2,2,3)) p <- rep(1/3, 3) beta0 <- 1.0 sim_data <- JANE::sim_A(N = 100L,                          model = \"NDH\",                         mus = mus,                          omegas = omegas,                          p = p,                          params_LR = list(beta0 = beta0),                         remove_isolates = TRUE)                          # Run JANE on simulated data res <- JANE::JANE(A = sim_data$A,                   D = 2L,                   K = 3L,                   initialization = \"GNN\",                    model = \"NDH\",                   case_control = FALSE,                   DA_type = \"none\")  # Run JANE on simulated data - consider multiple D and K res <- JANE::JANE(A = sim_data$A,                   D = 2:5,                   K = 2:10,                   initialization = \"GNN\",                    model = \"NDH\",                   case_control = FALSE,                   DA_type = \"none\")                    # Run JANE on simulated data - parallel with 5 cores (NOT RUN) # future::plan(future::multisession, workers = 5) # res <- JANE::JANE(A = sim_data$A, #                   D = 2L, #                   K = 3L, #                   initialization = \"GNN\",  #                   model = \"NDH\", #                   case_control = FALSE, #                   DA_type = \"none\") # future::plan(future::sequential)  # Run JANE on simulated data - case/control approach with 20 controls sampled for each actor res <- JANE::JANE(A = sim_data$A,                   D = 2L,                   K = 3L,                   initialization = \"GNN\",                    model = \"NDH\",                   case_control = TRUE,                   DA_type = \"none\",                   control = list(n_control = 20))                     # Reproducibility res1 <- JANE::JANE(A = sim_data$A,                    D = 2L,                    K = 3L,                    initialization = \"GNN\",                     seed = 1234,                    model = \"NDH\",                    case_control = FALSE,                    DA_type = \"none\")  res2 <- JANE::JANE(A = sim_data$A,                    D = 2L,                    K = 3L,                    initialization = \"GNN\",                     seed = 1234,                    model = \"NDH\",                    case_control = FALSE,                    DA_type = \"none\")    ## Check if results match all.equal(res1, res2)      # Another reproducibility example where the seed was not set.  # It is possible to replicate the results using the starting values due to  # the nature of EM algorithms res3 <- JANE::JANE(A = sim_data$A,                    D = 2L,                    K = 3L,                    initialization = \"GNN\",                     model = \"NDH\",                    case_control = FALSE,                    DA_type = \"none\") ## Extract starting values                     start_vals <- res3$optimal_start  ## Run JANE using extracted starting values, no need to specify D and K  ## below as function will determine those values from start_vals res4 <- JANE::JANE(A = sim_data$A,                    initialization = start_vals,                     model = \"NDH\",                    case_control = FALSE,                    DA_type = \"none\")                     ## Check if optimal_res are identical all.equal(res3$optimal_res, res4$optimal_res)                    # }"},{"path":"https://a1arakkal.github.io/JANE/reference/plot.JANE.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot JANE fits — plot.JANE","title":"Plot JANE fits — plot.JANE","text":"S3 plot method object class \"JANE\".","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/plot.JANE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot JANE fits — plot.JANE","text":"","code":"# S3 method for class 'JANE' plot(   x,   type = \"lsnc\",   true_labels,   initial_values = FALSE,   zoom = 100,   density_type = \"contour\",   rotation_angle = 0,   alpha_edge = 0.1,   alpha_node = 1,   swap_axes = FALSE,   main,   xlab,   ylab,   cluster_cols,   remove_noise_edges = FALSE,   ... )"},{"path":"https://a1arakkal.github.io/JANE/reference/plot.JANE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot JANE fits — plot.JANE","text":"x object S3 class \"JANE\", result call JANE. type character string select type plot: 'lsnc': plot network using estimated latent positions color-code actors cluster (default) 'misclassified': (can used true_labels !NULL) similar 'lsnc', color misclassified actors black 'uncertainty': similar 'lsnc', color gradient applied represents actor-specific classification uncertainty 'trace_plot': presents various trace plots across iterations EM algorithm true_labels (optional) numeric, character, factor vector known true cluster labels. Must length number actors fitted network. Need account potential isolates removed. initial_values logical; TRUE plots fit using starting parameters used EM algorithm (default FALSE, .e., results EM algorithm run plotted). zoom numeric value > 0 controls % magnification plot (default 100%). density_type Choose one following three options: 'contour' (default), 'hdr', 'image', 'persp' indicating density plot type. rotation_angle numeric value rotates estimated latent positions contours multivariate normal distributions clockwise (counterclockwise swap_axes = TRUE) specified angle origin (default 0 degrees). relevant D (.e., dimension latent space) >= 2 type != 'trace_plot'. alpha_edge numeric value [0,1] controls transparency network edges (default 0.1). alpha_node numeric value [0,1] controls transparency actors network (default 1). swap_axes logical; TRUE swap x y axes (default FALSE). main optional overall title plot. xlab optional title x axis. ylab optional title y axis. cluster_cols optional vector colors clusters. Must length least \\(K\\). remove_noise_edges (applicable JANE run noise_weights = TRUE) logical; TRUE remove noise edges based hard clustering rule \\(\\{h | \\hat{Z}^{W}_{eh} = max(\\hat{Z}^{W}_{e1}, \\hat{Z}^{W}_{e2})\\}\\) \\(e = 1,\\ldots,|E|\\), \\(\\hat{Z}^{W}_{e1}\\) \\(\\hat{Z}^{W}_{e2}\\) estimated conditional probabilities \\(e^{th}\\) edge non-noise noise edge, respectively (default FALSE). ... Unused.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/plot.JANE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot JANE fits — plot.JANE","text":"plot network trace plot EM run.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/plot.JANE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot JANE fits — plot.JANE","text":"classification actors specific clusters based hard clustering rule \\(\\{h | \\hat{Z}^{U}_{ih} = max_k \\hat{Z}^{U}_{ik}\\}\\). Additionally, actor-specific classification uncertainty derived 1 - \\(max_k \\hat{Z}^{U}_{ik}\\). trace plot contains five unique plots tracking various metrics across iterations EM algorithm, depending JANE control parameter termination_rule: termination_rule = 'prob_mat': Five plots presented. Specifically, top panel, plot left presents change absolute difference \\({\\hat{Z}^U}\\) (.e., \\(N \\times K\\) cluster membership probability matrix) subsequent iterations ,  noise_weights = TRUE, change absolute difference \\({\\hat{Z}^W}\\) (.e., \\(|E| \\times 2\\) edge weight cluster membership probability matrix) subsequent iterations. exact quantile absolute difference plotted presented parentheses determined JANE control parameter quantile_diff. example, default control parameter quantile_diff = 1, values plotted max absolute difference \\({\\hat{Z}^U}\\) (potentially \\({\\hat{Z}^W}\\))  subsequent iterations. plot right top panel presents absolute difference cumulative average absolute change \\({\\hat{Z}^U}\\) (potentially \\({\\hat{Z}^W}\\))  \\(\\hat{U}\\) (.e., \\(N \\times D\\) matrix latent positions) across subsequent iterations (absolute change \\({\\hat{Z}^U}\\), \\({\\hat{Z}^W}\\), \\(\\hat{U}\\) computed identical manner described previously). metric tracked beginning iteration determined n_its_start_CA control parameter JANE. Note, plot may empty EM algorithm converges n_its_start_CA-th iteration. Finally, bottom panel presents ARI, NMI, CER values comparing classifications subsequent iterations, respectively. Specifically, given iteration determine classification actors clusters based hard clustering rule \\(\\{h | \\hat{Z}^{U}_{ih} = max_k \\hat{Z}^{U}_{ik}\\}\\) given labels two subsequent iterations, compute plot ARI, NMI CER. termination_rule = 'Q': Plots generated similar described previous bullet point. However, instead tracking change \\({\\hat{Z}^U}\\) (potentially \\({\\hat{Z}^W}\\)) iterations, absolute difference objective function E-step evaluated using parameters subsequent iterations tracked. Furthermore, cumulative average absolute change \\(\\hat{U}\\) longer tracked. termination_rule %% c('ARI', 'NMI', 'CER'): Four plots presented. Specifically, top left panel presents plot absolute difference cumulative average absolute change specific termination_rule employed \\(\\hat{U}\\) across iterations. previously mentioned, EM algorithm converges n_its_start_CA-th iteration empty plot. Furthermore, three plots present ARI, NMI, CER values comparing classifications subsequent iterations, respectively.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/plot.JANE.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot JANE fits — plot.JANE","text":"error interrupts plotting process, graphics device may left state par(\"new\") = TRUE. can cause subsequent plots overlaid. reset graphics state, call plot.new() close reopen device dev.(); dev.new().","code":""},{"path":[]},{"path":"https://a1arakkal.github.io/JANE/reference/plot.JANE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot JANE fits — plot.JANE","text":"","code":"# \\donttest{ # Simulate network mus <- matrix(c(-1,-1,1,-1,1,1),                nrow = 3,               ncol = 2,                byrow = TRUE) omegas <- array(c(diag(rep(7,2)),                   diag(rep(7,2)),                    diag(rep(7,2))),                    dim = c(2,2,3)) p <- rep(1/3, 3) beta0 <- 1.0 sim_data <- JANE::sim_A(N = 100L,                          model = \"NDH\",                         mus = mus,                          omegas = omegas,                          p = p,                          params_LR = list(beta0 = beta0),                          remove_isolates = TRUE)                          # Run JANE on simulated data res <- JANE::JANE(A = sim_data$A,                   D = 2L,                   K = 3L,                   initialization = \"GNN\",                    model = \"NDH\",                   case_control = FALSE,                   DA_type = \"none\")  # plot trace plot plot(res, type = \"trace_plot\")                     # plot network plot(res)  # plot network - misclassified plot(res, type = \"misclassified\", true_labels = apply(sim_data$Z_U, 1, which.max))  # plot network - uncertainty and swap axes plot(res, type = \"uncertainty\", swap_axes = TRUE)  # plot network - but only show contours of MVNs plot(res, swap_axes = TRUE, alpha_edge = 0, alpha_node = 0)  # plot using starting values of EM algorithm plot(res, initial_values = TRUE) # }"},{"path":"https://a1arakkal.github.io/JANE/reference/sim_A.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate unweighted or weighted networks, with or without noise edges, from latent space cluster models — sim_A","title":"Simulate unweighted or weighted networks, with or without noise edges, from latent space cluster models — sim_A","text":"Simulate unweighted weighted network, without noise edges, \\(D\\)-dimensional latent space cluster model \\(K\\) clusters \\(N\\) actors. squared euclidean distance used (.e., \\(dist(U_i,U_j)^2\\)), \\(U_i\\) \\(U_j\\) respective actor's positions \\(D\\)-dimensional social space.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/sim_A.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate unweighted or weighted networks, with or without noise edges, from latent space cluster models — sim_A","text":"","code":"sim_A(   N,   mus,   omegas,   p,   model = \"NDH\",   family = \"bernoulli\",   params_LR,   params_weights = NULL,   noise_weights_prob = 0,   mean_noise_weights,   precision_noise_weights,   remove_isolates = TRUE )"},{"path":"https://a1arakkal.github.io/JANE/reference/sim_A.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate unweighted or weighted networks, with or without noise edges, from latent space cluster models — sim_A","text":"N integer specifying number actors network. mus numeric \\(K \\times D\\) matrix specifying mean vectors \\(K\\) \\(D\\)-variate normal distributions latent positions. omegas numeric \\(D \\times D \\times K\\) array specifying precision matrices \\(K\\) \\(D\\)-variate normal distributions latent positions. p numeric vector length \\(K\\) specifying mixture weights finite multivariate normal mixture distribution latent positions. model character string specifying type model used simulate network: 'NDH': generates undirected network degree heterogeneity (connection strength heterogeneity working weighted network) 'RS': generates undirected network degree heterogeneity (connection strength heterogeneity working weighted network), specifically including actor specific random sociality effects 'RSR': generates directed network degree heterogeneity (connection strength heterogeneity working weighted network), specifically including actor specific random sender receiver effects family character string specifying distribution edge weights. 'bernoulli': generates unweighted network latent space cluster model 'lognormal': generates weighted network first simulating unweighted network using latent space cluster model, assigning edge weights based log-normal GLM utilizing identity link 'poisson': generates weighted network first simulating unweighted network using latent space cluster model, assigning edge weights based zero-truncated Poisson GLM utilizing log link params_LR list containing parameters logistic regression model simulate unweighted network, including: 'beta0': numeric value specifying intercept parameter logistic regression model 'precision_R_effects': precision parameters random degree heterogeneity effects, specific logistic regression model: 'NDH': apply, can leave missing 'RS': numeric value specifying precision parameter normal distribution random sociality effect, missing generate gamma(shape = 1, rate = 1) 'RSR': numeric matrix specifying precision matrix multivariate normal distribution random sender receiver effects, missing generate Wishart(df = 3, Sigma = \\(I_2\\)) params_weights relevant family %% c('lognormal', 'poisson'). list containing parameters GLMs edge weights, including: 'beta0': numeric value specifying intercept parameter zero-truncated Poisson log-normal GLM 'precision_R_effects': precision parameters random connection strength heterogeneity effects, specific zero-truncated Poisson log-normal GLM: 'NDH': apply, can leave missing 'RS': numeric value specifying precision parameter normal distribution random sociality effect, missing generate gamma(shape = 1, rate = 1) 'RSR': numeric matrix specifying precision matrix multivariate normal distribution random sender receiver effects, missing generate Wishart(df = 3, Sigma = \\(I_2\\)) 'precision_weights': positive, non-zero, numeric representing precision (log scale) log-normal weight distribution. relevant family = 'lognormal' noise_weights_prob numeric [0,1] representing proportion edges simulated network noise edges (default 0.0). mean_noise_weights numeric representing mean noise weight distribution. relevant family %% c('lognormal', 'poisson') noise_weights_prob>0.0. family = 'poisson' value > 0.0, family = \"lognormal\" mean log scale. precision_noise_weights positive, non-zero, numeric representing precision (log scale) log-normal noise weight distribution. relevant family = 'lognormal' noise_weights_prob>0.0. remove_isolates logical; TRUE isolates network removed (default TRUE).","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/sim_A.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate unweighted or weighted networks, with or without noise edges, from latent space cluster models — sim_A","text":"list containing following components: sparse adjacency matrix class 'dgCMatrix' representing \"true\" underlying unweighted network noise edges. W sparse adjacency matrix class 'dgCMatrix' representing unweighted weighted network, without noise. Note, family = 'bernoulli' noise_weights_prob = 0, = W. q_prob numeric scalar representing proportion non-edges \"true\" underlying network converted noise edges. See 'Details' value computed. Z_U numeric \\(N \\times K\\) cluster assignment matrix rows representing cluster actor belongs (.e., indicated value 1.0). Z_W numeric \\(|E| \\times 4\\) edge weight cluster assignment matrix, \\(|E|\\) representing total number edges network (undirected networks, upper diagonal edges retained). first two columns (.e., '' 'j') contains specific indices edge \\(^{th}\\) \\(j^{th}\\) actors, third column (.e., 'weight') contains specific edge weight, fourth column (.e., 'Z_W') represents noise-cluster label, 1 denotes non-noise edge 2 denotes noise edge. NULL noise_weights_prob = 0. U numeric \\(N \\times D\\) matrix rows representing actor's position \\(D\\)-dimensional social space. mus inputted numeric \\(K \\times D\\) mus matrix. omegas inputted numeric \\(D \\times D \\times K\\) omegas array. p inputted numeric vector p length \\(K\\). noise_weights_prob inputted numeric scalar noise_weights_prob. mean_noise_weights inputted numeric scalar mean_noise_weights. NULL noise_weights_prob = 0. precision_noise_weights inputted numeric scalar precision_noise_weights. NULL noise_weights_prob = 0. model inputted model character string. family inputted family character string. params_LR inputted params_LR list. model != \"NDH\", additional element \"RE\" containing numeric \\(N \\times 1\\) matrix representing actor specific random sociality effect (.e., s) \\(N \\times 2\\) matrix representing actor specific random sender receiver effects (.e., s r, respectively). params_weights inputted params_weights list. model != \"NDH\", additional element \"RE\" containing numeric \\(N \\times 1\\) matrix representing actor specific random sociality effect (.e., s) \\(N \\times 2\\) matrix representing actor specific random sender receiver effects (.e., s r, respectively).","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/sim_A.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate unweighted or weighted networks, with or without noise edges, from latent space cluster models — sim_A","text":"returned scalar q_prob represents proportion non-edges simulated network converted noise edges, computed \\(\\frac{p_{noise} \\times D_{}}{(1-D_{}) \\times (1-p_{noise})}\\), \\(D_{}\\) density simulated network without noise \\(p_{noise}\\) inputted noise_weights_prob.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/sim_A.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate unweighted or weighted networks, with or without noise edges, from latent space cluster models — sim_A","text":"","code":"# \\donttest{  mus <- matrix(c(-1,-1,1,-1,1,1),                nrow = 3,               ncol = 2,                byrow = TRUE) omegas <- array(c(diag(rep(7,2)),                   diag(rep(7,2)),                    diag(rep(7,2))),                  dim = c(2,2,3)) p <- rep(1/3, 3) beta0 <- 1.0  # Simulate an undirected, unweighted network, with no noise and no degree heterogeneity JANE::sim_A(N = 100L,              model = \"NDH\",             mus = mus,              omegas = omegas,              p = p,              params_LR = list(beta0 = beta0),             remove_isolates = TRUE)  # Simulate a directed, weighted network, with degree and strength heterogeneity but no noise JANE::sim_A(N = 100L,              model = \"RSR\",             family = \"lognormal\",             mus = mus,              omegas = omegas,              p = p,              params_LR = list(beta0 = beta0),             params_weights = list(beta0 = 2,                                   precision_weights = 1),             remove_isolates = TRUE)  # Simulate an undirected, weighted network, with noise and degree and strength heterogeneity JANE::sim_A(N = 100L,              model = \"RS\",             family = \"poisson\",             mus = mus,              omegas = omegas,              p = p,              params_LR = list(beta0 = beta0),             params_weights = list(beta0 = 2),             noise_weights_prob = 0.1,             mean_noise_weights = 1,             remove_isolates = TRUE) # }"},{"path":"https://a1arakkal.github.io/JANE/reference/specify_initial_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify starting values for EM algorithm — specify_initial_values","title":"Specify starting values for EM algorithm — specify_initial_values","text":"function allows user specify starting values EM algorithm structure accepted JANE.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/specify_initial_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify starting values for EM algorithm — specify_initial_values","text":"","code":"specify_initial_values(   A,   D,   K,   model,   family = \"bernoulli\",   noise_weights = FALSE,   n_interior_knots = NULL,   U,   omegas,   mus,   p,   Z,   beta,   beta2,   precision_weights,   precision_noise_weights )"},{"path":"https://a1arakkal.github.io/JANE/reference/specify_initial_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify starting values for EM algorithm — specify_initial_values","text":"square matrix sparse matrix class 'dgCMatrix' representing adjacency matrix network interest. D integer specifying dimension latent positions. K integer specifying total number clusters. model character string specifying model: 'NDH': undirected network degree heterogeneity (connection strength heterogeneity working weighted network) 'RS': undirected network degree heterogeneity (connection strength heterogeneity working weighted network) 'RSR': directed network degree heterogeneity (connection strength heterogeneity working weighted network) family character string specifying distribution edge weights. 'bernoulli': unweighted networks; utilizes Bernoulli distribution logit link (default) 'lognormal': weighted networks positive, non-zero, continuous edge weights; utilizes log-normal distribution identity link 'poisson': weighted networks edge weights representing non-zero counts; utilizes zero-truncated Poisson distribution log link noise_weights logical; TRUE Hurdle model used account noise weights, FALSE simply utilizes supplied network (converted unweighted binary network weighted network supplied, .e., (> 0.0)*1.0) fits latent space cluster model (default FALSE). n_interior_knots integer specifying number interior knots used fitting natural cubic spline degree heterogeneity (connection strength heterogeneity working weighted network) models (.e., 'RS' 'RSR' ; default NULL). U numeric \\(N \\times D\\) matrix rows specifying actor's position \\(D\\)-dimensional social space. omegas numeric \\(D \\times D \\times K\\) array specifying precision matrices \\(K\\) \\(D\\)-variate normal distributions latent positions. mus numeric \\(K \\times D\\) matrix specifying mean vectors \\(K\\) \\(D\\)-variate normal distributions latent positions. p numeric vector length \\(K\\) specifying mixture weights finite multivariate normal mixture distribution latent positions. Z numeric \\(N \\times K\\) matrix rows representing conditional probability actor belongs cluster \\(K = k\\) \\(k = 1,\\ldots,K\\). beta numeric vector specifying regression coefficients logistic regression model. Specifically, vector length 1 + (model ==\"RS\")*(n_interior_knots + 1) + (model ==\"RSR\")*2*(n_interior_knots + 1). beta2 numeric vector specifying regression coefficients zero-truncated Poisson log-normal GLM. Specifically, vector length 1 + (model ==\"RS\")*(n_interior_knots + 1) + (model ==\"RSR\")*2*(n_interior_knots + 1).  relevant noise_weights = TRUE & family != 'bernoulli'. precision_weights positive numeric scalar specifying precision (log scale) log-normal weight distribution. relevant noise_weights = TRUE & family = 'lognormal'. precision_noise_weights positive numeric scalar specifying precision (log scale) log-normal noise weight distribution. relevant noise_weights = TRUE & family = 'lognormal'.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/specify_initial_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify starting values for EM algorithm — specify_initial_values","text":"list S3 class \"JANE.initial_values\" representing starting values EM algorithm, structure accepted JANE.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/specify_initial_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify starting values for EM algorithm — specify_initial_values","text":"match JANE, function remove isolates adjacency matrix determine total number actors excluding isolates. done, errors respect incorrect dimensions starting values generated executing JANE. Similarly match JANE, unsymmetric adjacency matrix supplied model %% c('NDH', 'RS') user asked like proceed converting symmetric matrix (.e., <- 1.0 * ( (+ t()) > 0.0 )). Additionally, weighted network supplied noise_weights = FALSE, network converted unweighted binary network (.e., (> 0.0)*1.0).","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/specify_initial_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify starting values for EM algorithm — specify_initial_values","text":"","code":"# \\donttest{ # Simulate network mus <- matrix(c(-1,-1,1,-1,1,1),                nrow = 3,               ncol = 2,                byrow = TRUE) omegas <- array(c(diag(rep(7,2)),                   diag(rep(7,2)),                    diag(rep(7,2))),                  dim = c(2,2,3)) p <- rep(1/3, 3) beta0 <- -1 sim_data <- JANE::sim_A(N = 100L,                          model = \"RSR\",                         mus = mus,                          omegas = omegas,                          p = p,                          params_LR = list(beta0 = beta0),                         remove_isolates = TRUE)  # Specify starting values D <- 3L K <- 5L N <- nrow(sim_data$A) n_interior_knots <- 5L  U <- matrix(stats::rnorm(N*D), nrow = N, ncol = D) omegas <- stats::rWishart(n = K, df = D+1, Sigma = diag(D)) mus <- matrix(stats::rnorm(K*D), nrow = K, ncol = D) p <- extraDistr::rdirichlet(n = 1, rep(3,K))[1,] Z <-  extraDistr::rdirichlet(n = N, alpha = rep(1, K)) beta <- stats::rnorm(n = 1 + 2*(1 + n_interior_knots))  my_starting_values <- JANE::specify_initial_values(A = sim_data$A,                                                    D = D,                                                    K = K,                                                    model = \"RSR\",                                                    n_interior_knots = n_interior_knots,                                                    U = U,                                                    omegas = omegas,                                                     mus = mus,                                                     p = p,                                                     Z = Z,                                                    beta = beta)           # Run JANE using my_starting_values (no need to specify D and K as function will  # determine those values from my_starting_values) res <- JANE::JANE(A = sim_data$A,                   initialization = my_starting_values,                   model = \"RSR\") # }"},{"path":"https://a1arakkal.github.io/JANE/reference/specify_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify prior hyperparameters for EM algorithm — specify_priors","title":"Specify prior hyperparameters for EM algorithm — specify_priors","text":"function allows user specify prior hyperparameters EM algorithm structure accepted JANE.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/specify_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify prior hyperparameters for EM algorithm — specify_priors","text":"","code":"specify_priors(   D = 2,   K = 2,   model,   family = \"bernoulli\",   noise_weights = FALSE,   n_interior_knots = NULL,   a,   b,   c,   G,   nu,   e,   f,   h,   l,   e_2,   f_2,   m_1,   o_1,   m_2,   o_2 )"},{"path":"https://a1arakkal.github.io/JANE/reference/specify_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify prior hyperparameters for EM algorithm — specify_priors","text":"D integer specifying dimension latent positions (default 2). K integer specifying total number clusters (default 2). model character string specifying model: 'NDH': undirected network degree heterogeneity (connection strength heterogeneity working weighted network) 'RS': undirected network degree heterogeneity (connection strength heterogeneity working weighted network) 'RSR': directed network degree heterogeneity (connection strength heterogeneity working weighted network) family character string specifying distribution edge weights. 'bernoulli': unweighted networks; utilizes Bernoulli distribution logit link (default) 'lognormal': weighted networks positive, non-zero, continuous edge weights; utilizes log-normal distribution identity link 'poisson': weighted networks edge weights representing non-zero counts; utilizes zero-truncated Poisson distribution log link noise_weights logical; TRUE Hurdle model used account noise weights, FALSE simply utilizes supplied network (converted unweighted binary network weighted network supplied, .e., (> 0.0)*1.0) fits latent space cluster model (default FALSE). n_interior_knots integer specifying number interior knots used fitting natural cubic spline degree heterogeneity (connection strength heterogeneity working weighted network) models (.e., 'RS' 'RSR' ; default NULL). numeric vector length \\(D\\) specifying mean multivariate normal prior \\(\\mu_k\\) \\(k = 1,\\ldots,K\\), \\(\\mu_k\\) represents mean multivariate normal distribution latent positions \\(k^{th}\\) cluster. b positive numeric scalar specifying scaling factor precision multivariate normal prior \\(\\mu_k\\) \\(k = 1,\\ldots,K\\), \\(\\mu_k\\) represents mean multivariate normal distribution latent positions \\(k^{th}\\) cluster. c numeric scalar \\(\\ge\\) \\(D\\) specifying degrees freedom Wishart prior \\(\\Omega_k\\) \\(k = 1,\\ldots,K\\), \\(\\Omega_k\\) represents precision multivariate normal distribution latent positions \\(k^{th}\\) cluster. G numeric \\(D \\times D\\) matrix specifying inverse scale matrix Wishart prior \\(\\Omega_k\\) \\(k = 1,\\ldots,K\\), \\(\\Omega_k\\) represents precision multivariate normal distribution latent positions \\(k^{th}\\) cluster. nu positive numeric vector length \\(K\\) specifying concentration parameters Dirichlet prior \\(p\\), \\(p\\) represents mixture weights finite multivariate normal mixture distribution latent positions. e numeric vector length 1 + (model =='RS')*(n_interior_knots + 1) +  (model =='RSR')*2*(n_interior_knots + 1) specifying mean multivariate normal prior \\(\\beta_{LR}\\), \\(\\beta_{LR}\\) represents coefficients logistic regression model. f numeric p.s.d square matrix dimension 1 + (model =='RS')*(n_interior_knots + 1) +  (model =='RSR')*2*(n_interior_knots + 1) specifying precision multivariate normal prior \\(\\beta_{LR}\\), \\(\\beta_{LR}\\) represents coefficients logistic regression model. h positive numeric scalar specifying first shape parameter Beta prior \\(q\\), \\(q\\) proportion non-edges \"true\" underlying network converted noise edges. relevant noise_weights = TRUE. l positive numeric scalar specifying second shape parameter Beta prior \\(q\\), \\(q\\) proportion non-edges \"true\" underlying network converted noise edges. relevant noise_weights = TRUE. e_2 numeric vector length 1 + (model =='RS')*(n_interior_knots + 1) +  (model =='RSR')*2*(n_interior_knots + 1) specifying mean multivariate normal prior \\(\\beta_{GLM}\\), \\(\\beta_{GLM}\\) represents coefficients zero-truncated Poisson log-normal GLM. relevant noise_weights = TRUE & family != 'bernoulli'. f_2 numeric p.s.d square matrix dimension 1 + (model =='RS')*(n_interior_knots + 1) +  (model =='RSR')*2*(n_interior_knots + 1) specifying precision multivariate normal prior \\(\\beta_{GLM}\\), \\(\\beta_{GLM}\\) represents coefficients zero-truncated Poisson log-normal GLM. relevant noise_weights = TRUE & family != 'bernoulli'. m_1 positive numeric scalar specifying shape parameter Gamma prior \\(\\tau^2_{weights}\\), \\(\\tau^2_{weights}\\) precision (log scale) log-normal weight distribution. Note, value scaled 0.5, see 'Details'. relevant noise_weights = TRUE & family = 'lognormal'. o_1 positive numeric scalar specifying rate parameter Gamma prior \\(\\tau^2_{weights}\\), \\(\\tau^2_{weights}\\) precision (log scale) log-normal weight distribution. Note, value scaled 0.5, see 'Details'. relevant noise_weights = TRUE & family = 'lognormal'. m_2 positive numeric scalar specifying shape parameter Gamma prior \\(\\tau^2_{noise \\ weights}\\), \\(\\tau^2_{noise \\ weights}\\) precision (log scale) log-normal noise weight distribution. Note, value scaled 0.5, see 'Details'. relevant noise_weights = TRUE & family = 'lognormal'. o_2 positive numeric scalar specifying rate parameter Gamma prior \\(\\tau^2_{noise \\ weights}\\), \\(\\tau^2_{noise \\ weights}\\) precision (log scale) log-normal noise weight distribution. Note, value scaled 0.5, see 'Details'. relevant noise_weights = TRUE & family = 'lognormal'.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/specify_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify prior hyperparameters for EM algorithm — specify_priors","text":"list S3 class \"JANE.priors\" representing prior hyperparameters EM algorithm, structure accepted JANE.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/specify_priors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify prior hyperparameters for EM algorithm — specify_priors","text":"Prior \\(\\boldsymbol{\\mu}_k\\) \\(\\boldsymbol{\\Omega}_k\\) (note: prior used \\(k = 1,\\ldots,K\\)) : $$\\boldsymbol{\\Omega}_k \\sim Wishart(c, \\boldsymbol{G}^{-1})$$ $$\\boldsymbol{\\mu}_k | \\boldsymbol{\\Omega}_k \\sim MVN(\\boldsymbol{}, (b\\boldsymbol{\\Omega}_k)^{-1})$$ Prior \\(\\boldsymbol{p}\\): current implementation require elements nu vector \\(\\ge 1\\) prevent negative mixture weights empty clusters. $$\\boldsymbol{p} \\sim Dirichlet(\\nu_1 ,\\ldots,\\nu_K)$$ Prior \\(\\boldsymbol{\\beta}_{LR}\\): $$\\boldsymbol{\\beta}_{LR} \\sim MVN(\\boldsymbol{e}, \\boldsymbol{F}^{-1})$$ Prior \\(q\\): $$q \\sim Beta(h, l)$$ Zero-truncated Poisson Prior \\(\\boldsymbol{\\beta}_{GLM}\\): $$\\boldsymbol{\\beta}_{GLM} \\sim MVN(\\boldsymbol{e}_{2}, \\boldsymbol{F}_{2}^{-1})$$ Log-normal Prior \\(\\tau^2_{weights}\\): $$\\tau^2_{weights} \\sim Gamma(\\frac{m_1}{2}, \\frac{o_1}{2})$$ Prior \\(\\boldsymbol{\\beta}_{GLM}\\): $$\\boldsymbol{\\beta}_{GLM}|\\tau^2_{weights} \\sim MVN(\\boldsymbol{e}_{2}, (\\tau^2_{weights}\\boldsymbol{F}_{2})^{-1})$$ Prior \\(\\tau^2_{noise \\ weights}\\): $$\\tau^2_{noise \\ weights} \\sim Gamma(\\frac{m_2}{2}, \\frac{o_2}{2})$$ Unevaluated calls can supplied values specific hyperparameters. particularly useful running JANE multiple combinations K D. See 'examples' section implementation examples.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/specify_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify prior hyperparameters for EM algorithm — specify_priors","text":"","code":"# \\donttest{ # Simulate network mus <- matrix(c(-1,-1,1,-1,1,1),                nrow = 3,               ncol = 2,                byrow = TRUE) omegas <- array(c(diag(rep(7,2)),                   diag(rep(7,2)),                    diag(rep(7,2))),                    dim = c(2,2,3)) p <- rep(1/3, 3) beta0 <- 1.0 sim_data <- JANE::sim_A(N = 100L,                          model = \"RS\",                         mus = mus,                          omegas = omegas,                          p = p,                          params_LR = list(beta0 = beta0),                          remove_isolates = TRUE)                                                   # Specify prior hyperparameters D <- 3L K <- 5L n_interior_knots <- 5L  a <- rep(1, D) b <- 3 c <- 4 G <- 10*diag(D) nu <- rep(2, K) e <- rep(0.5, 1 + (n_interior_knots + 1)) f <- diag(c(0.1, rep(0.5, n_interior_knots + 1)))  my_prior_hyperparameters <- specify_priors(D = D,                                            K = K,                                            model = \"RS\",                                            n_interior_knots = n_interior_knots,                                            a = a,                                            b = b,                                            c = c,                                            G = G,                                            nu = nu,                                            e = e,                                            f = f)                                             # Run JANE on simulated data using supplied prior hyperparameters res <- JANE::JANE(A = sim_data$A,                   D = D,                   K = K,                   initialization = \"GNN\",                   model = \"RS\",                   case_control = FALSE,                   DA_type = \"none\",                   control = list(priors = my_prior_hyperparameters))  # Specify prior hyperparameters as unevaluated calls n_interior_knots <- 5L e <- rep(0.5, 1 + (n_interior_knots + 1)) f <- diag(c(0.1, rep(0.5, n_interior_knots + 1)))  my_prior_hyperparameters <- specify_priors(model = \"RS\",                                            n_interior_knots = n_interior_knots,                                            a = quote(rep(1, D)),                                            b = b,                                            c = quote(D + 1),                                            G = quote(10*diag(D)),                                            nu = quote(rep(2, K)),                                            e = e,                                            f = f)                                             # # Run JANE on simulated data using supplied prior hyperparameters (NOT RUN) # future::plan(future::multisession, workers = 5) # res <- JANE::JANE(A = sim_data$A, #                    D = 2:5, #                    K = 2:10, #                    initialization = \"GNN\", #                    model = \"RS\", #                    case_control = FALSE, #                    DA_type = \"none\", #                    control = list(priors = my_prior_hyperparameters)) # future::plan(future::sequential)                                                                            # }"},{"path":"https://a1arakkal.github.io/JANE/reference/summary.JANE.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing JANE fits — summary.JANE","title":"Summarizing JANE fits — summary.JANE","text":"S3 summary method object class \"JANE\".","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/summary.JANE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing JANE fits — summary.JANE","text":"","code":"# S3 method for class 'JANE' summary(object, true_labels = NULL, initial_values = FALSE, ...)"},{"path":"https://a1arakkal.github.io/JANE/reference/summary.JANE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing JANE fits — summary.JANE","text":"object object S3 class \"JANE\", result call JANE. true_labels (optional) numeric, character, factor vector known true cluster labels. Must length number actors fitted network. Need account potential isolates removed (default NULL). initial_values logical; TRUE summarize fit using starting parameters used EM algorithm (default FALSE, .e., results EM algorithm run summarized). ... Unused.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/summary.JANE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizing JANE fits — summary.JANE","text":"list S3 class \"summary.JANE\" containing following components (Note: \\(N\\) number actors network, \\(K\\) number clusters, \\(D\\) dimension latent space): coefficients list containing estimated coefficients logistic regression model (.e., 'beta_LR') , relevant, estimated coefficients zero- truncated Poisson log-normal GLM (.e., 'beta_GLM'). U numeric \\(N \\times D\\) matrix rows containing actor's estimated latent position \\(D\\)-dimensional social space. p numeric vector length \\(K\\) containing estimated mixture weights finite multivariate normal mixture distribution latent positions. mus numeric \\(K \\times D\\) matrix containing estimated mean vectors \\(K\\) \\(D\\)-variate normal distributions latent positions. omegas numeric \\(D \\times D \\times K\\) array containing estimated precision matrices \\(K\\) \\(D\\)-variate normal distributions latent positions. Z_U numeric \\(N \\times K\\) matrix rows containing estimated conditional probability actor belongs cluster \\(K = k\\) \\(k = 1,\\ldots,K\\). uncertainty numeric vector length \\(N\\) containing uncertainty \\(^{th}\\) actor's classification, derived 1 - \\(max_k \\hat{Z}^{U}_{ik}\\). cluster_labels numeric vector length \\(N\\) containing cluster assignment actor based hard clustering rule \\(\\{h | \\hat{Z}^{U}_{ih} = max_k \\hat{Z}^{U}_{ik}\\}\\). Z_W numeric \\(|E| \\times 6\\) matrix, \\(|E|\\) representing total number edges network (undirected networks, upper diagonal edges retained). first two columns (.e., '' 'j') contains specific indices edge \\(^{th}\\) \\(j^{th}\\) actors, third column (.e., 'weight') contains specific edge weight, fourth column (.e., 'hat_zij1') contains estimated conditional probability specific edge non-noise edge, fifth column (.e., 'hat_zij2') contains estimated conditional probability specific edge noise edge, sixth column (.e., 'noise_edge_cluster_labels') contains noise-edge cluster assignment edge based hard clustering rule \\(\\{h | \\hat{Z}^{W}_{eh} = max(\\hat{Z}^{W}_{e1}, \\hat{Z}^{W}_{e2})\\}\\) \\(e = 1,\\ldots,|E|\\), \\(\\hat{Z}^{W}_{e1}\\) \\(\\hat{Z}^{W}_{e2}\\) estimated conditional probabilities \\(e^{th}\\) edge non-noise noise edge, respectively (labels defined , 1: non-noise edge 2: noise edge). NULL noise_weights = FALSE initial_values = TRUE. q_prob numeric scalar representing estimated proportion non-edges \"true\" unobserved network converted noise edges. precision_weights numeric scalar representing estimated precision (log scale) log-normal weight distribution. relevant family = 'lognormal' & noise_weights = TRUE. precision_noise_weights numeric scalar representing estimated precision (log scale) log-normal noise weight distribution. relevant family = 'lognormal' & noise_weights = TRUE. IC Information criteria values optimal fit selected, including 'BIC_model': BIC computed logistic regression Hurdle model component 'BIC_mbc': BIC computed model based clustering component 'ICL_mbc': ICL computed model based clustering component 'Total_BIC': sum 'BIC_model' 'BIC_mbc' 'Total_ICL': sum 'BIC_model' 'ICL_mbc' input_params list following components: model: character string containing specific model used (.e., 'NDH', 'RS', 'RSR') family: character string containing specific family used (.e., 'bernoulli', 'poisson', 'lognormal') noise_weights: logical; TRUE approach utilizing Hurdle model accounting noise edges utilized IC_selection: character string containing specific information criteria used select optimal fit (.e., 'BIC_model', 'BIC_mbc', 'ICL_mbc', 'Total_BIC', 'Total_ICL') case_control: logical; TRUE case/control approach utilized DA_type: character string containing specific deterministic annealing approach utilized (.e., 'none', 'cooling', 'heating', 'hybrid') priors: list prior hyperparameters used. See specify_priors definitions. clustering_performance (true_labels !NULL) list following components: CER: list two components: () misclassified: indices misclassified actors minimum error mapping cluster labels known true cluster labels (.e., true_labels) (ii) errorRate: error rate corresponding minimum error mapping cluster labels known true cluster labels (see classError details) ARI: numeric value containing adjusted Rand index comparing cluster labels known true cluster labels (see adjustedRandIndex details) NMI: numeric value containing normalized mutual information comparing cluster labels known true cluster labels (see NMI details) confusion_matrix: numeric table containing confusion matrix comparing cluster labels known true cluster labels.","code":""},{"path":"https://a1arakkal.github.io/JANE/reference/summary.JANE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing JANE fits — summary.JANE","text":"","code":"# \\donttest{ # Simulate network mus <- matrix(c(-1,-1,1,-1,1,1),                nrow = 3,               ncol = 2,                byrow = TRUE) omegas <- array(c(diag(rep(7,2)),                   diag(rep(7,2)),                    diag(rep(7,2))),                    dim = c(2,2,3)) p <- rep(1/3, 3) beta0 <- 1.0 sim_data <- JANE::sim_A(N = 100L,                          model = \"NDH\",                         mus = mus,                          omegas = omegas,                          p = p,                          params_LR = list(beta0 = beta0),                          remove_isolates = TRUE)                          # Run JANE on simulated data res <- JANE::JANE(A = sim_data$A,                   D = 2L,                   K = 3L,                   initialization = \"GNN\",                    model = \"NDH\",                   case_control = FALSE,                   DA_type = \"none\")                    # Summarize fit  summary(res)  # Summarize fit and compare to true cluster labels summary(res, true_labels = apply(sim_data$Z_U, 1, which.max))  # Summarize fit using starting values of EM algorithm summary(res, initial_values = TRUE) # }"}]
